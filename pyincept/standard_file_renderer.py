"""
    standard_file_renderer
    ~~~~~~~~~~~~~~~~~~~~~~~

    Houses the declaration of :py:class:`StandardFileRenderer` along with
    supporting classes, functions, and attributes.

    ~~~~~~~~~~~~~~~~~~~~~~~

    Unpublished Copyright 2020 Andrew van Herick. All Rights Reserved.
"""

__author__ = 'Andrew van Herick'

import errno
import os
from enum import Enum

from jinja2 import Template

from pyincept.architype_parameters import ArchitypeParameters

_TEMPLATE_PATH = os.path.abspath(
    os.path.join(__file__, os.pardir, '_resources', 'templates')
)


class StandardFileRenderer(Enum):
    """
    Enumerates the files generated by :py:meth:`ProjectBuilder.build`,
    and encapsulates the behavior of rendering and saving the content of
    each file based on the data held by a :py:class:`ProjectBuilder`.  Each
    file knows what template you use its source, how to render that
    template, and where to store the rendered result.  Each enumerated value
    in this class contains the name of a Jinja template file to use for
    rendering, as well as a function, which maps the data held by a
    :py:`ProjectBuilder` instance to the path where the rendered content
    should be stored.
    """
    ENTRY_POINT = (
        'entry_point.py.jinja',
        lambda b: os.path.join(b.package_name, '{}.py'.format(b.package_name))
    )

    INIT_PACKAGE = (
        '__init___package.py.jinja',
        lambda b: os.path.join(b.package_name, '__init__.py')
    )

    INIT_TESTS = (
        '__init___tests.py.jinja',
        lambda b: os.path.join('tests', '__init__.py')
    )

    INIT_TESTS_END_TO_END = (
        '__init___tests_end_to_end.py.jinja',
        lambda b: os.path.join('tests', 'end_to_end', '__init__.py')
    )

    INIT_TESTS_END_TO_END_PACKAGE = (
        '__init___tests_end_to_end_package.py.jinja',
        lambda b: os.path.join(
            'tests',
            'end_to_end',
            'test_{}'.format(b.package_name),
            '__init__.py'
        )
    )

    INIT_TESTS_INTEGRATION = (
        '__init___tests_integration.py.jinja',
        lambda b: os.path.join('tests', 'integration', '__init__.py')
    )

    INIT_TESTS_INTEGRATION_PACKAGE = (
        '__init___tests_integration_package.py.jinja',
        lambda b: os.path.join(
            'tests',
            'integration',
            'test_{}'.format(b.package_name),
            '__init__.py'
        )
    )

    INIT_TESTS_UNIT = (
        '__init___tests_unit.py.jinja',
        lambda b: os.path.join('tests', 'unit', '__init__.py')
    )

    INIT_TESTS_UNIT_PACKAGE = (
        '__init___tests_unit_package.py.jinja',
        lambda b: os.path.join(
            'tests',
            'unit',
            'test_{}'.format(b.package_name),
            '__init__.py'
        )
    )

    LICENSE = ('LICENSE.apache.jinja', lambda b: 'LICENSE')

    LOG_CFG = ('log.cfg.jinja', lambda b: 'log.cfg')

    MAKEFILE = ('Makefile.jinja', lambda b: 'Makefile')

    PIPFILE = ('Pipfile.jinja', lambda b: 'Pipfile')

    README_RST = ('README.rst.jinja', lambda b: 'README.rst')

    SETUP_CFG = ('setup.cfg.jinja', lambda b: 'setup.cfg')

    SETUP_PY = ('setup.py.jinja', lambda b: 'setup.py')

    def __init__(self, template_name, file_path_function) -> None:
        self._template_name = template_name
        self._file_path = file_path_function

    def _get_template(self) -> Template:
        template_path = os.path.join(_TEMPLATE_PATH, self._template_name)
        with open(template_path) as f:
            content = f.read()
            return Template(content, keep_trailing_newline=True)

    def _save_content(
            self,
            content: str,
            root_dir: str,
            params: ArchitypeParameters
    ) -> None:
        path_ = os.path.join(root_dir, self._file_path(params))

        try:
            os.makedirs(os.path.dirname(path_))
        except OSError as exc:
            if exc.errno != errno.EEXIST:
                raise

        with open(path_, 'w') as f:
            f.write(content)

    def render_and_save(
            self,
            root_dir: str,
            params: ArchitypeParameters
    ) -> None:
        """
        Renders and saves the file associated with this instance to the correct
        location, as determined by the content of a :py:class:`ProjectBuilder`
        instance.

        :param root_dir: the root directory under which the content should
        save its content

        :param params: the :py:class:`ProjectBuilder`, which contains the
        data needed to render and save the file
        """
        t = self._get_template()
        content = t.render(**params._asdict())
        self._save_content(content, root_dir, params)
