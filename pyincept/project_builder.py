"""
    project_builder
    ~~~~~~~~~~~~~~~~~~~~~~~

    Houses the declaration of
    :py:class:`pyincept.project_builder.ProjectBuilder` along with
    supporting classes, functions, and attributes.

    ~~~~~~~~~~~~~~~~~~~~~~~

    Unpublished Copyright 2020 Andrew van Herick. All Rights Reserved.
"""

__author__ = 'Andrew van Herick'

import errno
import os
from enum import Enum

from jinja2 import Template

from pyincept.architype_parameters import ArchitypeParameters

_TEMPLATE_PATH = os.path.abspath(
    os.path.join(__file__, os.pardir, '_resources', 'templates')
)


class ProjectBuilder(object):
    """
    This class is responsible for building the file directory structure for a
    newly incepted project.  It encapsulates and makes testable the bulk of
    behavior provided by the :py:func:`pyincept.incept.main` function.
    """

    def __init__(self, root_dir: str, params: ArchitypeParameters) -> None:
        """
        Class initializer method.

        :param root_dir: the root directory under which all files will be
        saved.

        :param params: the parameters that will be used to create parameterized
        content of generated files
        """
        super().__init__()
        self._params = params
        self._project_root = root_dir

    @property
    def project_root(self) -> str:
        """
        :return: the path, as supplied to the class initializer, of the
        project root directory
        """
        return os.path.abspath(self._project_root)

    @property
    def project_root_abs(self) -> str:
        """
        :return: the absolute path of the project root directory
        :rtype: str
        """
        return os.path.abspath(self._project_root)

    def build(self) -> None:
        """
        This method is responsible for building the project file and directory
        structure used to 'incept' a new project.  It uses data passed to the
        class initializer to create a directory/file tree with the following
        structure:

        ::

            root_dir/
                my_package/
                    __init__.py
                    my_package.py
                tests/
                    __init__.py
                    end-to-end/
                        __init__.py
                        test_my_package/
                            __init__.py
                    integration/
                        __init__.py
                        test_my_package/
                            __init__.py
                    unit/
                        __init__.py
                        test_my_package/
                            __init__.py
                LICENSE
                Makefile
                Pipfile
                README.rst
                setup.cfg
                setup.py

        where each of the files above has content customized according to the
        parameters held by this instance.
        """
        for f in _ProjectFile:
            f.render_and_save(self._project_root, self._params)


# Enumerates the files generated by :py:meth:`ProjectBuilder.build`,
# and encapsulates the behavior of rendering and saving the content of each
# file based on the data held by a :py:class:`ProjectBuilder`.  Each file
# knows what template you use its source, how to render that template,
# and where to store the rendered result.  Each enumerated value in this
# class contains the name of a Jinja template file to use for rendering,
# as well as a function, which maps the data held by a :py:`ProjectBuilder`
# instance to the path where the rendered content should be stored.
class _ProjectFile(Enum):
    ENTRY_POINT = (
        'entry_point.py.jinja',
        lambda b: os.path.join(b.package_name, '{}.py'.format(b.package_name))
    )

    INIT_PACKAGE = (
        '__init___package.py.jinja',
        lambda b: os.path.join(b.package_name, '__init__.py')
    )

    INIT_TESTS = (
        '__init___tests.py.jinja',
        lambda b: os.path.join('tests', '__init__.py')
    )

    INIT_TESTS_END_TO_END = (
        '__init___tests_end_to_end.py.jinja',
        lambda b: os.path.join('tests', 'end_to_end', '__init__.py')
    )

    INIT_TESTS_END_TO_END_PACKAGE = (
        '__init___tests_end_to_end_package.py.jinja',
        lambda b: os.path.join(
            'tests',
            'end_to_end',
            'test_{}'.format(b.package_name),
            '__init__.py'
        )
    )

    INIT_TESTS_INTEGRATION = (
        '__init___tests_integration.py.jinja',
        lambda b: os.path.join('tests', 'integration', '__init__.py')
    )

    INIT_TESTS_INTEGRATION_PACKAGE = (
        '__init___tests_integration_package.py.jinja',
        lambda b: os.path.join(
            'tests',
            'integration',
            'test_{}'.format(b.package_name),
            '__init__.py'
        )
    )

    INIT_TESTS_UNIT = (
        '__init___tests_unit.py.jinja',
        lambda b: os.path.join('tests', 'unit', '__init__.py')
    )

    INIT_TESTS_UNIT_PACKAGE = (
        '__init___tests_unit_package.py.jinja',
        lambda b: os.path.join(
            'tests',
            'unit',
            'test_{}'.format(b.package_name),
            '__init__.py'
        )
    )

    LICENSE = ('LICENSE.apache.jinja', lambda b: 'LICENSE')

    LOG_CFG = ('log.cfg.jinja', lambda b: 'log.cfg')

    MAKEFILE = ('Makefile.jinja', lambda b: 'Makefile')

    PIPFILE = ('Pipfile.jinja', lambda b: 'Pipfile')

    README_RST = ('README.rst.jinja', lambda b: 'README.rst')

    SETUP_CFG = ('setup.cfg.jinja', lambda b: 'setup.cfg')

    SETUP_PY = ('setup.py.jinja', lambda b: 'setup.py')

    def __init__(self, template_name, file_path_function) -> None:
        self._template_name = template_name
        self._file_path = file_path_function

    def _get_template(self) -> Template:
        template_path = os.path.join(_TEMPLATE_PATH, self._template_name)
        with open(template_path) as f:
            content = f.read()
            return Template(content, keep_trailing_newline=True)

    def _save_content(
            self,
            content: str,
            root_dir: str,
            params: ArchitypeParameters
    ) -> None:
        path_ = os.path.join(root_dir, self._file_path(params))

        try:
            os.makedirs(os.path.dirname(path_))
        except OSError as exc:
            if exc.errno != errno.EEXIST:
                raise

        with open(path_, 'w') as f:
            f.write(content)

    def render_and_save(
            self,
            root_dir: str,
            params: ArchitypeParameters
    ) -> None:
        """
        Renders and saves the file associated with this instance to the correct
        location, as determined by the content of a :py:class:`ProjectBuilder`
        instance.

        :param root_dir: the root directory under which the content should
        save its content

        :param params: the :py:class:`ProjectBuilder`, which contains the
        data needed to render and save the file
        """
        t = self._get_template()
        content = t.render(**params._asdict())
        self._save_content(content, root_dir, params)
